import os
from dataclasses import dataclass
from pathlib import Path
from dotenv import load_dotenv

# Загружаем переменные из /etc/secrets/.env
env_path = Path('/etc/secrets/.env')
if env_path.exists():
    load_dotenv(env_path)
else:
    print("Warning: /etc/secrets/.env not found, falling back to environment variables")

@dataclass(frozen=True)
class Config:
    # Telegram settings
    API_ID: str
    API_HASH: str
    PHONE_NUMBER: str
    CHANNEL_ID: str
    # Bot settings
    INTERVAL: int
    LANGUAGE: str
    # Gifts settings
    GIFT_RANGES: str
    PURCHASE_ONLY_UPGRADABLE_GIFTS: bool
    PRIORITIZE_LOW_SUPPLY: bool

    def __init__(self):
        # Load configuration from environment variables
        object.__setattr__(self, 'API_ID', os.getenv('API_ID', 'your_api_id'))
        object.__setattr__(self, 'API_HASH', os.getenv('API_HASH', 'your_api_hash'))
        object.__setattr__(self, 'PHONE_NUMBER', os.getenv('PHONE_NUMBER', '+1234567890'))
        object.__setattr__(self, 'CHANNEL_ID', os.getenv('CHANNEL_ID', '@notifications'))
        object.__setattr__(self, 'INTERVAL', int(os.getenv('INTERVAL', '10')))
        object.__setattr__(self, 'LANGUAGE', os.getenv('LANGUAGE', 'EN'))
        object.__setattr__(self, 'GIFT_RANGES', os.getenv('GIFT_RANGES', '1-1000: 500000 x 1: @user1, 123456'))
        object.__setattr__(self, 'PURCHASE_ONLY_UPGRADABLE_GIFTS', os.getenv('PURCHASE_ONLY_UPGRADABLE_GIFTS', 'False').lower() == 'true')
        object.__setattr__(self, 'PRIORITIZE_LOW_SUPPLY', os.getenv('PRIORITIZE_LOW_SUPPLY', 'True').lower() == 'true')

        # Debug output for verification
        print("Loaded configuration from .env:")
        print(f"API_ID: {self.API_ID}")
        print(f"CHANNEL_ID: {self.CHANNEL_ID}")
        print(f"GIFT_RANGES: {self.GIFT_RANGES}")

config = Config()
